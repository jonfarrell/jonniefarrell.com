// Generated by CoffeeScript 1.6.2
(function() {
  var checkRedirects, checkRoutes, con, config, e, fs, handleNoFile, http, matchRoute, onRequest, path, port, projectPath, respond301, respond404, respondWithFile, url;

  http = require("http");

  url = require("url");

  fs = require("fs");

  path = require("path");

  con = console;

  onRequest = function(request, response) {
    var pathname;

    pathname = url.parse(request.url).pathname;
    response.writeHead(200, {
      "Content-Type": "text/plain",
      "Access-Control-Allow-Origin": "*"
    });
    return fs.stat("" + projectPath + config.base + pathname, function(err, stat) {
      if (!err && stat.isFile()) {
        return respondWithFile(pathname, response);
      } else {
        if (!err) {
          return fs.exists("" + projectPath + config.base + pathname + "/" + config.indexFile, function(exists) {
            if (exists) {
              return respondWithFile("" + pathname + "/" + config.indexFile, response);
            } else {
              return handleNoFile(pathname, request, response);
            }
          });
        } else {
          return handleNoFile(pathname, request, response);
        }
      }
    });
  };

  respondWithFile = function(filePath, response) {
    return fs.readFile(projectPath + config.base + filePath, "binary", function(err, file) {
      var fileExtension, mimeType;

      if (err) {
        response.writeHead(500, {
          "Content-Type": "text/plain",
          "Access-Control-Allow-Origin": "*"
        });
        response.write("There was an error opening the file");
        response.write("" + err + "\n");
        response.end();
        return;
      }
      fileExtension = "";
      if ((filePath != null) && filePath.indexOf(".") !== -1) {
        fileExtension = filePath.substr(filePath.lastIndexOf(".") + 1);
      }
      mimeType = config.mimeTypes[fileExtension];
      if (mimeType != null) {
        response.writeHead(200, {
          "Content-Type": mimeType,
          "Access-Control-Allow-Origin": "*"
        });
      } else {
        response.writeHead(200, {
          "Content-Type": "text/plain",
          "Access-Control-Allow-Origin": "*"
        });
      }
      response.write(file, "binary");
      return response.end();
    });
  };

  handleNoFile = function(pathname, request, response) {
    if (config.redirects && config.redirects.pre) {
      if (checkRedirects(request.url, request, response, config.redirects.pre)) {
        return;
      }
    }
    if (checkRoutes(pathname, response)) {
      return;
    }
    if (config.redirects && config.redirects.post) {
      if (checkRedirects(request.url, request, response, config.redirects.post)) {
        return;
      }
    }
    return respond404(response, pathname);
  };

  checkRoutes = function(pathname, response) {
    var f, r, _ref;

    _ref = config.routes;
    for (r in _ref) {
      f = _ref[r];
      if (matchRoute(r, pathname)) {
        respondWithFile(f, response);
        return true;
      }
    }
    return false;
  };

  checkRedirects = function(pathname, request, response, redirects) {
    var l, r;

    for (r in redirects) {
      l = redirects[r];
      if (matchRoute(r, pathname)) {
        respond301(request, response, l);
        return true;
      }
    }
    return false;
  };

  matchRoute = function(route, pathname) {
    if (route === pathname) {
      return true;
    }
    if (route.indexOf("*") !== -1) {
      if (pathname.indexOf(route.split("*")[0]) === 0) {
        return true;
      }
    }
    return false;
  };

  respond404 = function(response, filePath) {
    var fileExtension, text404;

    text404 = function() {
      response.writeHead(404, {
        "Content-Type": "text/plain"
      });
      response.write("404 Not Found\n");
      return response.end();
    };
    fileExtension = "";
    if ((filePath != null) && filePath.indexOf(".") !== -1) {
      fileExtension = filePath.substr(filePath.lastIndexOf(".") + 1);
    }
    if ((fileExtension === "" || fileExtension === "html") && (config["404"] != null)) {
      return fs.readFile(projectPath + config.base + config["404"], "binary", function(err, file) {
        if (err) {
          return text404();
        }
        response.writeHead(404, {
          "Content-Type": "text/html"
        });
        response.write(file, "binary");
        return response.end();
      });
    } else {
      return text404();
    }
  };

  respond301 = function(request, response, location) {
    response.writeHead(301, {
      "Location": "http://" + request.headers.host + location
    });
    return response.end();
  };

  projectPath = process.argv[2] || "./";

  try {
    config = JSON.parse(fs.readFileSync(projectPath + "server_config.json", "utf8"));
  } catch (_error) {
    e = _error;
    console.log("Failed to load stouter_config.json");
    console.log("For more info on config files see https://github.com/roddeh/stouter");
    console.log(e.message);
    process.exit(1);
  }

  port = process.env.PORT || config.port;

  http.createServer(onRequest).listen(port);

  console.log("----------------------------");

  console.log("Started Server on port " + config.port);

  console.log("----------------------------");

}).call(this);
